{"version":3,"sources":["assets/colors.png","assets/zodiac.png","assets/numbers.png","assets/memory.png","components/Card/Card.js","components/WinnerWindow/WinnerWindow.js","gameData.js","components/Gameboard/Gameboard.js","components/GameMenuItem/GameMenuItem.js","components/GameMenu/GameMenu.js","components/App/App.js","index.js"],"names":["module","exports","Card","handleClick","e","card","gameType","element","target","style","setProperty","value","props","onSelect","render","data","text","faceup","className","id","onClick","React","Component","WinnerWindow","resetGame","colors","zodiac","role","aria-label","gameData","concat","slice","games","Gameboard","componentDidMount","createDeck","deckData","randomValues","Set","size","min","Math","ceil","max","floor","random","add","numbersDeck","getRandomValues","deck","shuffle","setState","tempValue","randomIndex","currentIndex","length","componentDidUpdate","prevProps","selectedCards","state","push","setAnimationType","handleMatchAnimation","animationType","animate","setTimeout","flipCardDown","isMatch","saveMatch","newMatch","allMatches","matches","map","winner","cards","classNames","find","isSelected","selected","cardData","join","key","bind","winnerWindow","GameMenuItem","type","setGameType","imgSrc","numbers","src","alt","GameMenu","gameTypes","App","getRandomGame","num","gameReset","gameboard","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeb2b830.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/colors.b3c4a248.png\";","module.exports = __webpack_public_path__ + \"static/media/zodiac.9b9dce84.png\";","module.exports = __webpack_public_path__ + \"static/media/numbers.96052716.png\";","module.exports = __webpack_public_path__ + \"static/media/memory.babea8b6.png\";","import React from 'react';\n\nclass Card extends React.Component {\n  handleClick = (e, card, gameType) => {\n    const element = e.target;\n\n    if (gameType === 'colors') {\n      element.style.setProperty('--faceup-card-bg', `var(--${card.value})`);\n    }\n\n    this.props.onSelect(card);\n  }\n\n  render = () => {\n    const card = this.props.data;\n    let text = card.faceup ? card.value : '';\n    let className = this.props.className;\n  \n    if (this.props.className === 'zodiac faceup') {\n      className += ' zodiac-card';\n    }\n\n    return (\n      <div\n        id={ card.value }\n        className={ className }\n        onClick={ (e) => this.handleClick(e, card, card.gameType) }\n      >\n        {text}\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from 'react';\n\nclass WinnerWindow extends React.Component {\n  handleClick = () => {\n    this.props.resetGame();\n  }\n\n  render = () => {\n    return (\n      <div id='overlay'>\n        <div id=\"winnerBanner\">\n          <h1>You win!</h1>\n          <button onClick={ () => this.handleClick() }>Play again?</button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default WinnerWindow;\n","import React from 'react';\n\nconst colors = ['navy', 'blue', 'fuchsia', 'olive', 'green', 'yellow', 'orange', 'red',\n  'purple', 'maroon', 'gray', 'black'];\n\nconst games = ['colors', 'zodiac', 'numbers'];\n\nconst zodiac = [\n  <div>aries<br /><span role='img' aria-label='zodiac emoji aries' className='zodiac-emoji'>♈</span></div>,\n  <div>taurus<br /><span role='img' aria-label='zodiac emoji taurus' className='zodiac-emoji'>♉</span></div>,\n  <div>gemini<br /><span role='img' aria-label='zodiac emoji gemini' className='zodiac-emoji'>♊</span></div>,\n  <div>cancer<br /><span role='img' aria-label='zodiac emoji cancer' className='zodiac-emoji'>♋</span></div>,\n  <div>leo<br /><span role='img' aria-label='zodiac emoji leo' className='zodiac-emoji'>♌️</span></div>,\n  <div>virgo<br /><span role='img' aria-label='zodiac emoji virgo' className='zodiac-emoji'>♍️</span></div>,\n  <div>libra<br /><span role='img' aria-label='zodiac emoji libra' className='zodiac-emoji'>♎️</span></div>,\n  <div>scorpio<br /><span role='img' aria-label='zodiac emoji scorpio' className='zodiac-emoji'>♏️</span></div>,\n  <div>sagittarius<br /><span role='img' aria-label='zodiac emoji sagittarius' className='zodiac-emoji'>♐️</span></div>,\n  <div>capricorn<br /><span role='img' aria-label='zodiac emoji capricorn' className='zodiac-emoji'>♑️</span></div>,\n  <div>aquarius<br /><span role='img' aria-label='zodiac emoji aquarius' className='zodiac-emoji'>♒️</span></div>,\n  <div>pisces<br /><span role='img' aria-label='zodiac emoji pisces' className='zodiac-emoji'>♓️</span></div>\n];\n\nconst gameData = {\n  colors: colors.concat(colors.slice(0)),\n  games,\n  zodiac: zodiac.concat(zodiac.slice(0)),\n};\n\nexport default gameData;\n","import React from 'react';\n\nimport Card from '../../components/Card/Card';\nimport WinnerWindow from '../../components/WinnerWindow/WinnerWindow';\n\nimport gameData from '../../gameData';\n\nclass Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animate: false,\n      matches: [],\n      selectedCards: [],\n      winner: false\n    }\n  }\n\n  componentDidMount = () => {\n    this.createDeck();\n  }\n\n  createDeck = () => {\n    const { props: { gameType } } = this;\n    const getRandomValues = () => {\n      const randomValues = new Set();\n      while (randomValues.size < 12) {\n        const min = Math.ceil(0);\n        const max = Math.floor(1500);\n        const value = Math.floor(Math.random() * (max - min)) + min;\n        randomValues.add(value);\n      };\n      const numbersDeck = [...randomValues];\n      return numbersDeck.concat(numbersDeck.slice(0));\n    };\n\n    let deckData = gameData[gameType];\n\n    if (gameType === 'numbers') {\n      deckData = getRandomValues();\n    }\n\n    const deck = this.shuffle(deckData);\n    this.setState({ deck });\n  };\n  \n  shuffle = deck => {\n    let currentIndex = deck.length;\n    let tempValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element\n      tempValue = deck[currentIndex];\n      deck[currentIndex] = deck[randomIndex];\n      deck[randomIndex] = tempValue;\n    }\n    return deck;\n  }\n\n  componentDidUpdate = prevProps => {\n    // If gameType has changed, reset state\n    if (prevProps !== this.props) {\n      this.resetGame();\n      this.createDeck();\n    }\n  }\n\n  onSelect = card => {\n    const selectedCards = [...this.state.selectedCards];\n\n    if (selectedCards.length !== 2) {\n      selectedCards.push(card);\n    }\n  \n    this.setState({ selectedCards }, () => {\n      if (this.state.selectedCards.length === 2) {\n        this.setAnimationType();\n      }\n    });\n  }\n\n  handleMatchAnimation = (animationType, selectedCards) => {\n    this.setState({ animate: true, animationType }, () => {\n      setTimeout(this.flipCardDown, 1000);\n      if (this.isMatch()) setTimeout(() => this.saveMatch(selectedCards), 1000);\n    });\n  }\n\n  flipCardDown = () => {\n    this.setState({\n      animate: false,\n      animationType: '',\n      selectedCards: []\n    });\n  }\n\n  saveMatch = newMatch => {\n    const { state: { matches } } = this;\n    const allMatches = matches\n      .concat(newMatch\n      .map(card => card));\n\n    if (allMatches.length === 24) {\n      this.setState({ winner: true });\n    }\n\n    this.setState({ matches: allMatches });\n  }\n\n  setAnimationType = () => {\n    let animationType;\n    \n    // If gameType is 'colors', no transition animation is necessary\n    if (this.props.gameType === 'numbers') {\n      animationType = 'no-match';\n    } else if (this.props.gameType === 'zodiac') {\n      animationType = 'no-match-zodiac';\n    }\n\n    if (this.isMatch()) {\n      animationType = 'highlight-match';\n    }\n\n    this.handleMatchAnimation(animationType, this.state.selectedCards);\n  }\n\n  resetGame = () => {\n    this.setState({\n      deck: [],\n      matches: [],\n      selectedCards: [],\n      winner: false\n    });\n  }\n\n  isMatch = () => {\n    const { state: { selectedCards } } = this;\n    return selectedCards[0].value === selectedCards[1].value ? true : false;\n  }\n\n  render = () => {\n    let cards = [];\n    const {\n      props: { gameType },\n      state: { animate, animationType, deck, matches, selectedCards, winner }\n\t\t} = this;\n\n    if (deck) {\n      cards = deck.map((value, id) => {\n        let classNames = [gameType];\n        const isMatch = matches.find(matches => matches.id === id) ? true : false;\n        const isSelected = selectedCards.find(selected => selected.id === id) ? true : false;\n        const cardData = { value, id, faceup: false, gameType };\n\n        if (isSelected) {\n          cardData.faceup = true;\n          classNames.push('faceup');\n        }\n  \n        if (isSelected && animate) {\n          classNames.push(animationType);\n        }\n  \n        return <Card\n          className={ isMatch ? 'matched' : classNames.join(' ') }\n          data={ cardData }\n          key={ id }\n          onSelect={ this.onSelect.bind(this) }\n        />;\n      });\n    }\n  \n    const winnerWindow = winner ? <WinnerWindow resetGame={ this.resetGame.bind(this) } /> : null;\n\n    return (\n      <div id='game-wrapper'>\n        <div className='game-container' id='game-container'>\n          { cards }\n          { winnerWindow }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gameboard;\n","import React from 'react';\n\nimport * as colors from '../../assets/colors.png';\nimport * as zodiac from '../../assets/zodiac.png';\nimport * as numbers from '../../assets/numbers.png';\n\n\nclass GameMenuItem extends React.Component {\n  handleClick = type => {\n    this.props.setGameType(type);\n  }\n\n  render = () => {\n    const type = this.props.className;\n    const images = {\n      colors,\n      numbers,\n      zodiac\n    };\n    const imgSrc = images[type];\n\n    return (\n      <li\n        className='banner-list-item'\n        onClick={ () => this.handleClick(type) }\n      >\n        <img className='banner-list-image' src={ imgSrc } alt='brain logo' />\n      </li>\n    );\n  }\n}\n\nexport default GameMenuItem;\n","import React from 'react';\n\nimport GameMenuItem from '../GameMenuItem/GameMenuItem.js';\n\nclass GameMenu extends React.Component {\n  handleClick = type => {\n    this.props.setGameType(type);\n  }\n\n  render = () => {\n    return (\n      <ul className='banner-list'>\n        {\n          this.props.gameTypes.map((type, id) => {\n            return <GameMenuItem\n              key={ id }\n              className={ type }\n              setGameType={() => this.handleClick(type)}\n            />;\n          })\n        }\n      </ul>\n    );\n  }\n}\n\nexport default GameMenu;\n","import React from 'react';\n\nimport './App.css';\n\nimport Gameboard from '../../components/Gameboard/Gameboard';\nimport GameMenu from '../GameMenu/GameMenu';\n\nimport gameData from '../../gameData';\nimport * as imgSrc from '../../assets/memory.png';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    \n    this.state = { gameType: '', gameReset: '' };\n  }\n\n  getRandomGame = () => {\n    const num = Math.floor(Math.random() * Math.floor(3));\n    return this.setGameType(gameData.games[num]);\n  }\n\n  setGameType = type => {\n    const gameReset = this.state.gameType === type ? true : false;\n    this.setState({ gameType: type, gameReset });\n  }\n\n  render = () => {\n    const gameboard = this.state.gameType\n      ? <Gameboard gameReset={ this.state.gameReset } gameType={ this.state.gameType } />\n      : null;\n\n    return (\n      <div className='app-wrap'>\n        <div className='banner-container'>\n          <div className='banner-header-container' onClick={ this.getRandomGame }>\n            <img src={ imgSrc } alt='memory logo brain' className='banner-logo' />\n            <h1 className='banner-header'>Memory!</h1>\n          </div>\n          <GameMenu\n            className='banner-list'\n            gameTypes={ gameData.games }\n            setGameType={ this.setGameType.bind(this) }\n          />\n        </div>\n        {gameboard}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}